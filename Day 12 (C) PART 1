//https://adventofcode.com/2022/day/12


#include <stdlib.h>
#include <stdio.h>
#include <fcntl.h>
#include <stdbool.h>

int climberRec(int** map, int* R, int* C, int r, int c) {

	int sol = 0;
	int UP = 0, DW = 0, LT = 0, RT = 0;

	if (r != 0) {
		if (map[r - 1][c] == 69 && map[r][c] == 122) { /*printf("trovato!\n");*/ return sol = 1; }
		if (map[r - 1][c] - map[r][c] == 1 || map[r][c] - map[r - 1][c] == 0) {
			map[r][c] -= 60;
			printf("proseguo in %c\n", map[r - 1][c]);
			UP = climberRec(map, R, C, r - 1, c);
			map[r][c] += 60;
		}
	}
	if (r + 1 < *R) {
		if (map[r + 1][c] == 69 && map[r][c] == 122) { /*printf("trovato!\n");*/ return sol = 1; }
		if (map[r + 1][c] - map[r][c] == 1 || map[r][c] - map[r + 1][c] == 0) {
			map[r][c] -= 60;
			printf("proseguo in %c\n", map[r + 1][c]);
			DW = climberRec(map, R, C, r + 1, c);
			map[r][c] += 60;
		}
	}
	if (c != 0) {
		if (map[r][c - 1] == 69 && map[r][c] == 122) { /*printf("trovato!\n");*/ return sol = 1; }
		if (map[r][c - 1] - map[r][c] == 1 || map[r][c] - map[r][c - 1] == 0) {
			map[r][c] -= 60;
			printf("proseguo in %c\n", map[r][c-1]);
			LT = climberRec(map, R, C, r, c - 1);
			map[r][c] += 60;
		}
	}
	if (c + 1 < *C) {
		if (map[r][c + 1] == 69 && map[r][c] == 122) { /*printf("trovato!\n");*/ return sol = 1; }
		if (map[r][c + 1] - map[r][c] == 1 || map[r][c] - map[r][c + 1] == 0) {
			map[r][c] -= 60;
			printf("proseguo in %c\n", map[r][c + 1]);
			RT = climberRec(map, R, C, r, c + 1);
			map[r][c] += 60;
		}
	}

	if (map[r][c] == 'S') {
		if (r != 0) { UP = climberRec(map, R, C, r - 1, c); }
		if (r + 1 < *R) { DW = climberRec(map, R, C, r + 1, c); }
		if (c != 0) { LT = climberRec(map, R, C, r, c - 1); }
		if (c + 1 < *C) { RT = climberRec(map, R, C, r, c + 1); }
	}

	if (UP != 0 || DW != 0 || LT != 0 || RT != 0) {
		if (UP + DW + LT + RT == UP) { return UP + 1; }
		if (UP + DW + LT + RT == DW) { return DW + 1; }
		if (UP + DW + LT + RT == LT) { return LT + 1; }
		if (UP + DW + LT + RT == RT) { return RT + 1; }
		//else
		int check[4] = { UP, DW, LT, RT };
		sol = 9999;
		for (int i = 0; i < 4; i++) {
			if (check[i] != 0 && check[i] < sol) { sol = check[i]; }
		}
		sol++;
	}

	return sol;
}

int** mapper(int* fd, int* N, int* L) {
	char ch;
	int** map;
	int n = 0; int l = 0;
	int sol = 0;

	//recreating the map matrix
	bool lined = false;
	while (read(fd, &ch, 1)) {
		if (!lined) n++;
		if (ch == '\n') {
			l++;
			lined = true;
		}
	}
	*N = n;
	*L = l;
	lseek(fd, 0, SEEK_SET);
	map = (int**)malloc(*L * sizeof(int*));
	for (int i = 0; i < *L; i++) {
		map[i] = (int*)malloc(*N * sizeof(int));
	}
	int r = 0, c = 0;
	while (read(fd, &ch, 1)) {
		if (c==n-1) { r++; c = 0; if (read(fd, &ch, 1) != 1) { break; } }
		map[r][c] = ch;
		c++;
	}

	return map;
}

void climber(int* fd) {
	
	int* N; int n = 0; N = &n;
	int* L; int l = 0; L = &l;
	int** map = mapper(fd, N, L);

	int sol = 0;
	for (int i = 0; i < *L; i++) {


		for (int j = 0; j < *N; j++) {
			if (map[i][j] == 'S') {
				sol = climberRec(map, L, N, i, j);
				printf("%d\n", sol);
			}
		}
	}

	printf("%d\n", sol);
}

int main(int argc, char** argv) {

	int fd;

	if (argc != 2) { printf("error: wrong number of parameters\n"); exit(2); }
	if ((fd = open(argv[1], O_RDONLY)) < 0) { printf("error: unable to open the file %s\n", *argv[1]); exit(2); }

	climber(fd);

	return 0;
}
